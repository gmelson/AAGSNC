#!/usr/bin/env node
var cli = require("optimist").
usage('Usage: $0 [include] -e [entry] -o [output] -p [port] -d -s').
default("d", process.cwd()).
default("p", "browser").
default("t", "combine").
default("prefix", "modules").
demand(["e"]).
alias("d", "directory").
alias("p", "platform").
alias("t", "type").
alias("h", "help").
describe("d", "output file / dir")

outcome = require("outcome"),
fs = require("fs"),
amdify = require("../");
transformers = amdify.transformers;

var argv = cli.argv;

if(argv.help) {
  cli.showHelp();
  process.exit();
}


function fullPath(path) {
  return require.resolve(path.substr(0, 1) != "/" ? argv.d + "/" + path : path);
}


var amdify = require("../");

amdify({
  entry: fullPath(argv.e),
  directory: argv.d,
  prefix: argv.prefix
}, outcome.e(function(err) {
  console.error(err.stack);
  process.exit(1);
}).s(function(bundle) {

  var dir, isDir;


  try {
    stat = fs.lstatSync(argv.o);
  } catch(e) { }

  isDir = stat && stat.isDirectory(),
  dir = isDir ? argv.o : path.dirname(argv.o);


  var transformer = new transformers.Template("amd"), 
  stat;

  

  if(isDir) {
    //transformer = new transformers.Collection([new transformers.AmdConfig({ output: dir + "/request.config.js" }), transformer]);
    transformer = new transformers.Copy({ output: argv.o }, transformer);
  } else {
    transformer = new transformers.Concat({ output: argv.o }, transformer);
  }

  bundle.transform(transformer);
}));
